/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/recaptcha_v3.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ScriptService } from './script.service';
export class ReCaptchaV3Service {
    /**
     * @param {?} scriptService
     * @param {?} zone
     */
    constructor(scriptService, zone) {
        this.scriptService = scriptService;
        this.zone = zone;
    }
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback
     * @param {?=} config
     * @return {?}
     */
    execute(siteKey, action, callback, config) {
        this.executeAsPromise(siteKey, action, config).then(callback);
    }
    /**
     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify
     * this token in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?=} config
     * @return {?}
     */
    executeAsPromise(siteKey, action, config) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const useGlobalDomain = config && config.useGlobalDomain ? true : false;
            /** @type {?} */
            const onRegister = (/**
             * @param {?} grecaptcha
             * @return {?}
             */
            grecaptcha => {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    try {
                        grecaptcha
                            .execute(siteKey, { action })
                            .then((/**
                         * @param {?} token
                         * @return {?}
                         */
                        token => this.zone.run((/**
                         * @return {?}
                         */
                        () => resolve(token)))));
                    }
                    catch (error) {
                        reject(error);
                    }
                }));
            });
            this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);
        }));
    }
}
ReCaptchaV3Service.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ReCaptchaV3Service.ctorParameters = () => [
    { type: ScriptService },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.scriptService;
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhX3YzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY2FwdGNoYS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9yZWNhcHRjaGFfdjMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRCxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQUM3QixZQUFzQixhQUE0QixFQUFZLElBQVk7UUFBcEQsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFRO0lBQUcsQ0FBQzs7Ozs7Ozs7Ozs7OztJQVc5RSxPQUFPLENBQ0wsT0FBZSxFQUNmLE1BQWMsRUFDZCxRQUFpQyxFQUNqQyxNQUVDO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7Ozs7Ozs7OztJQVdELGdCQUFnQixDQUNkLE9BQWUsRUFDZixNQUFjLEVBQ2QsTUFFQztRQUVELE9BQU8sSUFBSSxPQUFPOzs7OztRQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFOztrQkFDL0IsZUFBZSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUs7O2tCQUVqRSxVQUFVOzs7O1lBQUcsVUFBVSxDQUFDLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCOzs7Z0JBQUMsR0FBRyxFQUFFO29CQUMvQixJQUFJO3dCQUNGLFVBQVU7NkJBQ1AsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDOzZCQUM1QixJQUFJOzs7O3dCQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUMsQ0FBQztxQkFDdkQ7b0JBQUMsT0FBTyxLQUFLLEVBQUU7d0JBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNmO2dCQUNILENBQUMsRUFBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFBO1lBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FDdEMsZUFBZSxFQUNmLE9BQU8sRUFDUCxVQUFVLENBQ1gsQ0FBQztRQUNKLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBN0RGLFVBQVU7Ozs7WUFGRixhQUFhO1lBRkQsTUFBTTs7Ozs7OztJQU1iLDJDQUFzQzs7Ozs7SUFBRSxrQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNjcmlwdFNlcnZpY2UgfSBmcm9tICcuL3NjcmlwdC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlQ2FwdGNoYVYzU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNjcmlwdFNlcnZpY2U6IFNjcmlwdFNlcnZpY2UsIHByb3RlY3RlZCB6b25lOiBOZ1pvbmUpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4ZWN1dGVzIHJlQ2FwdGNoYSB2MyB3aXRoIGdpdmVuIGFjdGlvbiBhbmQgcGFzc2VzIHRva2VuIHZpYSBjYWxsYmFjay4gWW91IG5lZWQgdG8gdmVyaWZ5XHJcbiAgICogdGhpcyBjYWxsYmFjayBpbiB5b3VyIGJhY2tlbmQgdG8gZ2V0IG1lYW5pbmdmdWwgcmVzdWx0cy5cclxuICAgKlxyXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvZG9jcy92M1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHNpdGVLZXkgU2l0ZSBrZXkgZm91bmQgaW4geW91ciBnb29nbGUgYWRtaW4gcGFuZWxcclxuICAgKiBAcGFyYW0gYWN0aW9uIEFjdGlvbiB0byBsb2dcclxuICAgKi9cclxuICBleGVjdXRlKFxyXG4gICAgc2l0ZUtleTogc3RyaW5nLFxyXG4gICAgYWN0aW9uOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKHRva2VuOiBzdHJpbmcpID0+IHZvaWQsXHJcbiAgICBjb25maWc/OiB7XHJcbiAgICAgIHVzZUdsb2JhbERvbWFpbjogYm9vbGVhbjtcclxuICAgIH1cclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMuZXhlY3V0ZUFzUHJvbWlzZShzaXRlS2V5LCBhY3Rpb24sIGNvbmZpZykudGhlbihjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGVjdXRlcyByZUNhcHRjaGEgdjMgd2l0aCBnaXZlbiBhY3Rpb24gYW5kIHJldHVybnMgdG9rZW4gdmlhIFByb21pc2UuIFlvdSBuZWVkIHRvIHZlcmlmeVxyXG4gICAqIHRoaXMgdG9rZW4gaW4geW91ciBiYWNrZW5kIHRvIGdldCBtZWFuaW5nZnVsIHJlc3VsdHMuXHJcbiAgICpcclxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcmVjYXB0Y2hhL2RvY3MvdjNcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzaXRlS2V5IFNpdGUga2V5IGZvdW5kIGluIHlvdXIgZ29vZ2xlIGFkbWluIHBhbmVsXHJcbiAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gdG8gbG9nXHJcbiAgICovXHJcbiAgZXhlY3V0ZUFzUHJvbWlzZShcclxuICAgIHNpdGVLZXk6IHN0cmluZyxcclxuICAgIGFjdGlvbjogc3RyaW5nLFxyXG4gICAgY29uZmlnPzoge1xyXG4gICAgICB1c2VHbG9iYWxEb21haW46IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHVzZUdsb2JhbERvbWFpbiA9IGNvbmZpZyAmJiBjb25maWcudXNlR2xvYmFsRG9tYWluID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgY29uc3Qgb25SZWdpc3RlciA9IGdyZWNhcHRjaGEgPT4ge1xyXG4gICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBncmVjYXB0Y2hhXHJcbiAgICAgICAgICAgICAgLmV4ZWN1dGUoc2l0ZUtleSwgeyBhY3Rpb24gfSlcclxuICAgICAgICAgICAgICAudGhlbih0b2tlbiA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHJlc29sdmUodG9rZW4pKSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5zY3JpcHRTZXJ2aWNlLnJlZ2lzdGVyQ2FwdGNoYVNjcmlwdChcclxuICAgICAgICB1c2VHbG9iYWxEb21haW4sXHJcbiAgICAgICAgc2l0ZUtleSxcclxuICAgICAgICBvblJlZ2lzdGVyXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19