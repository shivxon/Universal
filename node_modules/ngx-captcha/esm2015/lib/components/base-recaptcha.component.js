/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/base-recaptcha.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output, } from '@angular/core';
import { NgControl } from '@angular/forms';
/**
 * @abstract
 */
export class BaseReCaptchaComponent {
    /**
     * @protected
     * @param {?} renderer
     * @param {?} zone
     * @param {?} injector
     * @param {?} scriptService
     */
    constructor(renderer, zone, injector, scriptService) {
        this.renderer = renderer;
        this.zone = zone;
        this.injector = injector;
        this.scriptService = scriptService;
        /**
         * Prefix of the captcha element
         */
        this.captchaElemPrefix = 'ngx_captcha_id_';
        this.setupCaptcha = true;
        /**
         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')
         */
        this.useGlobalDomain = false;
        /**
         * Type
         */
        this.type = 'image';
        /**
         * Tab index
         */
        this.tabIndex = 0;
        /**
         * Called when captcha receives successful response.
         * Captcha response token is passed to event.
         */
        this.success = new EventEmitter();
        /**
         * Called when captcha is loaded. Event receives id of the captcha
         */
        this.load = new EventEmitter();
        /**
         * Called when captcha is reset.
         */
        this.reset = new EventEmitter();
        /**
         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.
         */
        this.ready = new EventEmitter();
        /**
         * Error callback
         */
        this.error = new EventEmitter();
        /**
         * Expired callback
         */
        this.expire = new EventEmitter();
        /**
         * Indicates if captcha should be set on load
         */
        this.setupAfterLoad = false;
        /**
         * If enabled, captcha will reset after receiving success response. This is useful
         * when invisible captcha need to be resolved multiple times on same page
         */
        this.resetCaptchaAfterSuccess = false;
        /**
         * Indicates if captcha is loaded
         */
        this.isLoaded = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.control = this.injector.get(NgControl).control;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.setupCaptcha) {
            this.setupCaptcha = false;
            this.setupComponent();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // cleanup scripts if language changed because they need to be reloaded
        if (changes && changes.hl) {
            // cleanup scripts when language changes
            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {
                this.scriptService.cleanup();
            }
        }
        if (changes && changes.useGlobalDomain) {
            // cleanup scripts when domain changes
            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {
                this.scriptService.cleanup();
            }
        }
        this.setupCaptcha = true;
    }
    /**
     * Gets captcha response as per reCaptcha docs
     * @return {?}
     */
    getResponse() {
        return this.reCaptchaApi.getResponse(this.captchaId);
    }
    /**
     * Gets Id of captcha widget
     * @return {?}
     */
    getCaptchaId() {
        return this.captchaId;
    }
    /**
     * Resets captcha
     * @return {?}
     */
    resetCaptcha() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            // reset captcha using Google js api
            this.reCaptchaApi.reset();
            // required due to forms
            this.onChange(undefined);
            this.onTouched(undefined);
            // trigger reset event
            this.reset.next();
        }));
    }
    /**
     * Gets last submitted captcha response
     * @return {?}
     */
    getCurrentResponse() {
        return this.currentResponse;
    }
    /**
     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
     * @return {?}
     */
    reloadCaptcha() {
        this.setupComponent();
    }
    /**
     * @protected
     * @param {?} captchaElemId
     * @return {?}
     */
    ensureCaptchaElem(captchaElemId) {
        /** @type {?} */
        const captchaElem = document.getElementById(captchaElemId);
        if (!captchaElem) {
            throw Error(`Captcha element with id '${captchaElemId}' was not found`);
        }
        // assign captcha alem
        this.captchaElem = captchaElem;
    }
    /**
     * Responsible for instantiating captcha element
     * @protected
     * @return {?}
     */
    renderReCaptcha() {
        // run outside angular zone due to timeout issues when testing
        // details: https://github.com/Enngage/ngx-captcha/issues/26
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());
            this.ready.next();
        }));
    }
    /**
     * Called when captcha receives response
     * @protected
     * @param {?} callback Callback
     * @return {?}
     */
    handleCallback(callback) {
        this.currentResponse = callback;
        this.success.next(callback);
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.onChange(callback);
            this.onTouched(callback);
        }));
        if (this.resetCaptchaAfterSuccess) {
            this.resetCaptcha();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getPseudoUniqueNumber() {
        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);
    }
    /**
     * @private
     * @return {?}
     */
    setupComponent() {
        // captcha specific setup
        this.captchaSpecificSetup();
        // create captcha wrapper
        this.createAndSetCaptchaElem();
        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (/**
         * @param {?} grecaptcha
         * @return {?}
         */
        (grecaptcha) => {
            this.onloadCallback(grecaptcha);
        }), this.hl);
    }
    /**
     * Called when google's recaptcha script is ready
     * @private
     * @param {?} grecapcha
     * @return {?}
     */
    onloadCallback(grecapcha) {
        // assign reference to reCaptcha Api once its loaded
        this.reCaptchaApi = grecapcha;
        if (!this.reCaptchaApi) {
            throw Error(`ReCaptcha Api was not initialized correctly`);
        }
        // loaded flag
        this.isLoaded = true;
        // fire load event
        this.load.next();
        // render captcha
        this.renderReCaptcha();
        // setup component if it was flagged as such
        if (this.setupAfterLoad) {
            this.setupAfterLoad = false;
            this.setupComponent();
        }
    }
    /**
     * @private
     * @return {?}
     */
    generateNewElemId() {
        return this.captchaElemPrefix + this.getPseudoUniqueNumber();
    }
    /**
     * @private
     * @return {?}
     */
    createAndSetCaptchaElem() {
        // generate new captcha id
        this.captchaElemId = this.generateNewElemId();
        if (!this.captchaElemId) {
            throw Error(`Captcha elem Id is not set`);
        }
        if (!this.captchaWrapperElem) {
            throw Error(`Captcha DOM element is not initialized`);
        }
        // remove old html
        this.captchaWrapperElem.nativeElement.innerHTML = '';
        // create new wrapper for captcha
        /** @type {?} */
        const newElem = this.renderer.createElement('div');
        newElem.id = this.captchaElemId;
        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);
        // update captcha elem
        this.ensureCaptchaElem(this.captchaElemId);
    }
    /**
     * To be aligned with the ControlValueAccessor interface we need to implement this method
     * However as we don't want to update the recaptcha, this doesn't need to be implemented
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) { }
    /**
     * This method helps us tie together recaptcha and our formControl values
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * At some point we might be interested whether the user has touched our component
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Handles error callback
     * @protected
     * @return {?}
     */
    handleErrorCallback() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.onChange(undefined);
            this.onTouched(undefined);
        }));
        this.error.next();
    }
    /**
     * Handles expired callback
     * @protected
     * @return {?}
     */
    handleExpireCallback() {
        this.expire.next();
        // reset captcha on expire callback
        this.resetCaptcha();
    }
}
BaseReCaptchaComponent.propDecorators = {
    siteKey: [{ type: Input }],
    useGlobalDomain: [{ type: Input }],
    type: [{ type: Input }],
    hl: [{ type: Input }],
    tabIndex: [{ type: Input }],
    success: [{ type: Output }],
    load: [{ type: Output }],
    reset: [{ type: Output }],
    ready: [{ type: Output }],
    error: [{ type: Output }],
    expire: [{ type: Output }]
};
if (false) {
    /**
     * Prefix of the captcha element
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.captchaElemPrefix;
    /**
     * @type {?}
     * @private
     */
    BaseReCaptchaComponent.prototype.setupCaptcha;
    /**
     * Google's site key.
     * You can find this under https://www.google.com/recaptcha
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.siteKey;
    /**
     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.useGlobalDomain;
    /**
     * Type
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.type;
    /**
     * Language code. Auto-detects the user's language if unspecified.
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.hl;
    /**
     * Tab index
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.tabIndex;
    /**
     * Called when captcha receives successful response.
     * Captcha response token is passed to event.
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.success;
    /**
     * Called when captcha is loaded. Event receives id of the captcha
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.load;
    /**
     * Called when captcha is reset.
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.reset;
    /**
     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.ready;
    /**
     * Error callback
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.error;
    /**
     * Expired callback
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.expire;
    /** @type {?} */
    BaseReCaptchaComponent.prototype.captchaWrapperElem;
    /**
     * Indicates if captcha should be set on load
     * @type {?}
     * @private
     */
    BaseReCaptchaComponent.prototype.setupAfterLoad;
    /**
     * Captcha element
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.captchaElem;
    /**
     * Id of the captcha elem
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.captchaId;
    /**
     * Holds last response value
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.currentResponse;
    /**
     * If enabled, captcha will reset after receiving success response. This is useful
     * when invisible captcha need to be resolved multiple times on same page
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.resetCaptchaAfterSuccess;
    /**
     * Captcha type
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.recaptchaType;
    /**
     * Required by ControlValueAccessor
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.onTouched;
    /**
     * Indicates if captcha is loaded
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.isLoaded;
    /**
     * Reference to global reCaptcha API
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.reCaptchaApi;
    /**
     * Id of the DOM element wrapping captcha
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.captchaElemId;
    /**
     * Form Control to be enable usage in reactive forms
     * @type {?}
     */
    BaseReCaptchaComponent.prototype.control;
    /**
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.zone;
    /**
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BaseReCaptchaComponent.prototype.scriptService;
    /**
     * Gets reCaptcha properties
     * @abstract
     * @protected
     * @return {?}
     */
    BaseReCaptchaComponent.prototype.getCaptchaProperties = function () { };
    /**
     * Used for captcha specific setup
     * @abstract
     * @protected
     * @return {?}
     */
    BaseReCaptchaComponent.prototype.captchaSpecificSetup = function () { };
}
//# sourceMappingURL=data:application/json;base64,