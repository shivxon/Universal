/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { FormBuilder, Validators } from '@angular/forms';
import { CreditCardValidator } from 'angular-cc-library';
var NgStripeComponent = /** @class */ (function () {
    function NgStripeComponent(httpClient, formBuilder) {
        this.httpClient = httpClient;
        this.formBuilder = formBuilder;
        this.stripeBtnText = 'Pay Now';
        this.stripeBtnLoading = 'Please Wait..';
        this.BtnText = 'Pay Now';
        this.stripe = {
            stripeBtnText: 'Pay Now',
            stripMessage: '',
            stripBtnDisabled: false,
            submitted: false,
            stripData: {}
        };
        this.apiResponse = new EventEmitter();
        this.stripeCardForm = this.formBuilder.group({
            name: ['', [(/** @type {?} */ (Validators.required))]],
            cardNumber: ['', [(/** @type {?} */ (CreditCardValidator.validateCCNumber))]],
            expirationDate: ['', [(/** @type {?} */ (CreditCardValidator.validateExpDate))]],
            cvc: ['', [(/** @type {?} */ (Validators.required)), (/** @type {?} */ (Validators.minLength(3))), (/** @type {?} */ (Validators.maxLength(4)))]]
        });
    }
    Object.defineProperty(NgStripeComponent.prototype, "setstripeBtnText", {
        set: /**
         * @param {?} stripeBtnText
         * @return {?}
         */
        function (stripeBtnText) {
            this.stripeBtnText = stripeBtnText;
            this.BtnText = this.stripeBtnText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "setcurrency", {
        set: /**
         * @param {?} currency
         * @return {?}
         */
        function (currency) {
            this.currency = currency;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "setorderId", {
        set: /**
         * @param {?} orderId
         * @return {?}
         */
        function (orderId) {
            this.orderId = orderId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "setemail", {
        set: /**
         * @param {?} email
         * @return {?}
         */
        function (email) {
            this.email = email;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "setstripeBtnLoading", {
        set: /**
         * @param {?} stripeBtnLoading
         * @return {?}
         */
        function (stripeBtnLoading) {
            this.stripeBtnLoading = stripeBtnLoading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "setapiKey", {
        set: /**
         * @param {?} apiKey
         * @return {?}
         */
        function (apiKey) {
            this.apiKey = apiKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "setapiSecret", {
        set: /**
         * @param {?} apiSecret
         * @return {?}
         */
        function (apiSecret) {
            this.apiSecret = apiSecret;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgStripeComponent.prototype, "settotalAmount", {
        set: /**
         * @param {?} totalAmount
         * @return {?}
         */
        function (totalAmount) {
            this.totalAmount = totalAmount;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgStripeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    Object.defineProperty(NgStripeComponent.prototype, "f", {
        /* Stripe Payment */
        get: /* Stripe Payment */
        /**
         * @return {?}
         */
        function () { return this.stripeCardForm.controls; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgStripeComponent.prototype.payUsingStripe = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var total = parseFloat((Math.round(this.totalAmount * 100) / 100).toFixed(2));
        console.log('Total Order Amounth is ' + total);
        /** @type {?} */
        var amount = Math.round(total * 100).toString();
        this.stripe.submitted = true;
        // stop here if form is invalid
        if (this.stripeCardForm.invalid) {
            return;
        }
        this.BtnText = this.stripeBtnLoading;
        this.stripe.stripBtnDisabled = true;
        /* Generating card token */
        /** @type {?} */
        var tokenbody = new HttpParams()
            .set('card[number]', this.stripeCardForm.value.cardNumber)
            .set('card[cvc]', this.stripeCardForm.value.cvc)
            .set('card[exp_month]', this.getMonth(this.stripeCardForm.value.expirationDate))
            .set('card[exp_year]', this.getYear(this.stripeCardForm.value.expirationDate))
            .set('card[name]', this.stripeCardForm.value.name)
            .set('key', this.apiKey);
        /** @type {?} */
        var httpOptions = {
            headers: new HttpHeaders({
                Authorization: 'Bearer ' + this.apiSecret,
                'Content-Type': 'application/x-www-form-urlencoded'
            })
        };
        this
            .httpClient
            .post("https://api.stripe.com/v1/tokens", tokenbody, httpOptions)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                /** @type {?} */
                var description = 'Order id ' + _this.orderId + ' and user ' + _this.email + '';
                /** @type {?} */
                var body = new HttpParams()
                    .set('amount', amount)
                    .set('currency', _this.currency)
                    .set('source', data.id)
                    .set('description', description);
                _this
                    .httpClient
                    .post("https://api.stripe.com/v1/charges", body, httpOptions)
                    .subscribe((/**
                 * @param {?} datas
                 * @return {?}
                 */
                function (datas) {
                    _this.apiResponse.emit({ data: datas, token: data });
                    _this.stripe.stripBtnDisabled = true;
                    _this.stripe.stripMessage = '';
                    _this.BtnText = _this.stripeBtnText;
                }), (/**
                 * @param {?} errs
                 * @return {?}
                 */
                function (errs) {
                    _this.apiResponse.emit({ breaks: 'charges', err: errs });
                    _this.stripe.stripBtnDisabled = false;
                    _this.BtnText = _this.stripeBtnText;
                }));
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.apiResponse.emit({ breaks: 'tokens', err: err });
            _this.stripe.stripBtnDisabled = false;
            _this.BtnText = _this.stripeBtnText;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NgStripeComponent.prototype.getMonth = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return data.substring(0, 2);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NgStripeComponent.prototype.getYear = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var y = data.split('/');
        if (y.length > 1) {
            return y[1].trim();
        }
    };
    NgStripeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ng-stripe',
                    template: "<form [formGroup]=\"stripeCardForm\" novalidate (ngSubmit)=\"payUsingStripe()\" class=\"text-center\">\n    <div class=\"cardHolderW\">\n        <div class=\"cardHolder text-left\">\n            <div class=\"cardHolder-front\">\n                <div class=\"cardHolder-front-inner\">\n                    <div class=\"form-group\">\n                        <input type=\"text\" formControlName=\"cardNumber\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': stripe.submitted && f.cardNumber.errors }\" placeholder=\"Card Number\" ccFormat />\n                        <div *ngIf=\"f.cardNumber.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.cardNumber.errors.ccNumber\">Invalid Card Number</div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <input type=\"tel\" formControlName=\"expirationDate\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': stripe.submitted && f.expirationDate.errors }\" placeholder=\"Expiration Date\" ccExp />\n                        <div *ngIf=\"f.expirationDate.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.expirationDate.errors.expDate\">Expiration Date is invalid</div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-15 mb-0\">\n                    <input type=\"text\" formControlName=\"name\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': stripe.submitted && f.name.errors }\" placeholder=\"Card Holder Name\" />\n                    <div *ngIf=\"f.name.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.name.errors.required\">Name is required</div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"cardHolder-back\">\n                <div class=\"cardHolder-back-inner\">\n                    <div class=\"form-group\">\n                        <input type=\"text\" formControlName=\"cvc\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': stripe.submitted && f.cvc.errors }\" ccCvc mask=\"0*\" placeholder=\"CVC\" mask=\"0000\" />\n                        <div *ngIf=\"f.cvc.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.cvc.errors.required\">CVC is required</div>\n                            <div *ngIf=\"f.cvc.errors.maxlength || f.cvc.errors.minlength\">Invalid CVC</div>\n                        </div>\n                    </div>\n                    <p>Code on the back of your card</p>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"alert alert-danger\" *ngIf=\"stripe.stripMessage != ''\">\n            {{stripe.stripMessage}}\n        </div>\n\n        <button type=\"submit\" [disabled]=\"stripe.stripBtnDisabled\" class=\"btn btn-primary pt-2 pb-2 pr-4 pl-4 text-uppercase w-100 mb-15\">{{BtnText}}</button>\n\n    </div>\n</form>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    NgStripeComponent.ctorParameters = function () { return [
        { type: HttpClient },
        { type: FormBuilder }
    ]; };
    NgStripeComponent.propDecorators = {
        apiResponse: [{ type: Output }],
        setstripeBtnText: [{ type: Input, args: ['stripeBtnText',] }],
        setcurrency: [{ type: Input, args: ['currency',] }],
        setorderId: [{ type: Input, args: ['orderId',] }],
        setemail: [{ type: Input, args: ['email',] }],
        setstripeBtnLoading: [{ type: Input, args: ['stripeBtnLoading',] }],
        setapiKey: [{ type: Input, args: ['apiKey',] }],
        setapiSecret: [{ type: Input, args: ['apiSecret',] }],
        settotalAmount: [{ type: Input, args: ['totalAmount',] }]
    };
    return NgStripeComponent;
}());
export { NgStripeComponent };
if (false) {
    /** @type {?} */
    NgStripeComponent.prototype.apiKey;
    /** @type {?} */
    NgStripeComponent.prototype.apiSecret;
    /** @type {?} */
    NgStripeComponent.prototype.totalAmount;
    /** @type {?} */
    NgStripeComponent.prototype.stripeBtnText;
    /** @type {?} */
    NgStripeComponent.prototype.stripeBtnLoading;
    /** @type {?} */
    NgStripeComponent.prototype.BtnText;
    /** @type {?} */
    NgStripeComponent.prototype.orderId;
    /** @type {?} */
    NgStripeComponent.prototype.email;
    /** @type {?} */
    NgStripeComponent.prototype.currency;
    /** @type {?} */
    NgStripeComponent.prototype.stripeCardForm;
    /** @type {?} */
    NgStripeComponent.prototype.stripe;
    /** @type {?} */
    NgStripeComponent.prototype.apiResponse;
    /**
     * @type {?}
     * @private
     */
    NgStripeComponent.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    NgStripeComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,